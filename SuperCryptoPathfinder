import requests
import pandas as pd
import matplotlib.pyplot as plt
import ta

class SuperCryptoPathfinder:
    def __init__(self, api_url: str):
        self.api_url = api_url

    def fetch_market_data(self, symbol: str, interval: str = '1d', limit: int = 100):
        """
        Fetch historical market data for a specific cryptocurrency symbol.
        """
        endpoint = f"{self.api_url}/klines"
        params = {
            'symbol': symbol,
            'interval': interval,
            'limit': limit
        }
        response = requests.get(endpoint, params=params)
        if response.status_code == 200:
            data = response.json()
            df = pd.DataFrame(data, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume', 'close_time',
                                             'quote_asset_volume', 'number_of_trades', 'taker_buy_base_asset_volume',
                                             'taker_buy_quote_asset_volume', 'ignore'])
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            df.set_index('timestamp', inplace=True)
            df = df[['open', 'high', 'low', 'close', 'volume']].astype(float)
            return df
        else:
            raise Exception(f"Failed to fetch data: {response.status_code}")

    def apply_technical_indicators(self, df: pd.DataFrame):
        """
        Apply technical indicators to the market data.
        """
        df['SMA'] = ta.trend.sma_indicator(df['close'], window=20)
        df['EMA'] = ta.trend.ema_indicator(df['close'], window=20)
        df['RSI'] = ta.momentum.rsi(df['close'], window=14)
        df['MACD'] = ta.trend.macd(df['close'])
        return df

    def visualize_data(self, df: pd.DataFrame, symbol: str):
        """
        Visualize the market data and technical indicators.
        """
        plt.figure(figsize=(14, 7))
        
        # Plot close price
        plt.subplot(3, 1, 1)
        plt.plot(df.index, df['close'], label='Close Price')
        plt.plot(df.index, df['SMA'], label='SMA')
        plt.plot(df.index, df['EMA'], label='EMA')
        plt.title(f'{symbol} Price and Moving Averages')
        plt.legend()

        # Plot RSI
        plt.subplot(3, 1, 2)
        plt.plot(df.index, df['RSI'], label='RSI')
        plt.axhline(30, linestyle='--', alpha=0.5, color='red')
        plt.axhline(70, linestyle='--', alpha=0.5, color='red')
        plt.title(f'{symbol} RSI')
        plt.legend()

        # Plot MACD
        plt.subplot(3, 1, 3)
        plt.plot(df.index, df['MACD'], label='MACD')
        plt.title(f'{symbol} MACD')
        plt.legend()

        plt.tight_layout()
        plt.show()

# Example usage
if __name__ == "__main__":
    api_url = 'https://api.your-crypto-data-source.com'
    crypto_pathfinder = SuperCryptoPathfinder(api_url)

    # Example cryptocurrency symbol
    symbol = 'BTCUSDT'

    try:
        market_data = crypto_pathfinder.fetch_market_data(symbol)
        market_data_with_indicators = crypto_pathfinder.apply_technical_indicators(market_data)
        crypto_pathfinder.visualize_data(market_data_with_indicators, symbol)
    except Exception as e:
        print(e)
